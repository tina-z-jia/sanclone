# -*- coding: utf-8 -*-
"""get_seq_annotation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dJEOj6Jw3qOHsxcsP-W3Uj7mbKhvWnHi
"""

from Bio import Entrez
from Bio import SeqIO


class SequenceAnnotation:
    def __init__(self, vector):
        # Ensure the vector is a SeqRecord object from Biopython
        if not isinstance(vector, SeqIO.SeqRecord):
            raise ValueError("Input 'vector' must be a SeqRecord object from Biopython's SeqIO.")
        self.vector = vector
        self.linear_insert = None
        # clone_seq is a DNA seq in string format
        # clone is the SeqRecord with annotations
        self.clone_seq = None
        self.clone = None

    def store_linear_insert(self, linear_insert):
        # Ensure the linear_insert is a SeqRecord object from Biopython
        if not isinstance(linear_insert, SeqIO.SeqRecord):
            raise ValueError("Input 'linear_insert' must be a SeqRecord object from Biopython's SeqIO.")
        self.linear_insert = linear_insert

    # def store_clone_annotation(self, clone_seq):
    #     # Ensure the linear_insert is a SeqRecord object from Biopython
    #     self.clone_seq = clone_seq


    #     self.clone =

    def retrieve_vector(self):
        return self.vector

    def retrieve_linear_insert(self):
        return self.linear_insert

    def retrieve_clone(self):
        return self.clone
    # seq to annotation


def download_genbank_file(accession, filename):
    Entrez.email = "tina.zetong.jia@example.com"  # Always provide your email address when using NCBI's services
    with Entrez.efetch(db="nucleotide", id=accession, rettype="gb", retmode="text") as handle:
        with open(filename, 'w') as outfile:
            outfile.write(handle.read())


# example

accession_id_vector = "NC_005213"
output_filename_vector = "NC_005213.gbk"
accession_id_linear_insert = "NC_000932"
output_filename_linear_insert = "NC_000932.gbk"
download_genbank_file(accession_id_vector, output_filename_vector)
download_genbank_file(accession_id_linear_insert, output_filename_linear_insert)

for gb_record in SeqIO.parse(open(output_filename_linear_insert,"r"), "genbank") :
    # now do something with the record
    print ("Name %s, %i features" % (gb_record.name, len(gb_record.features)))

vector_seq = list(SeqIO.parse(open(output_filename_vector,"r"), "genbank"))
insert_seq = list(SeqIO.parse(open(output_filename_linear_insert,"r"), "genbank"))

seq_anno = SequenceAnnotation(vector_seq[0])
seq_anno.store_linear_insert(insert_seq[0])

retrieved_vector = seq_anno.retrieve_vector()
retrieved_insert = seq_anno.retrieve_linear_insert()
print(retrieved_vector)
print(retrieved_insert)
